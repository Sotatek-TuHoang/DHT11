[1/15] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D E:\Team1.Temperate-and-Humidity\build\bootloader\esp-idf\esptool_py && C:\Espressif\python_env\idf5.0_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.0.1/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 E:/Team1.Temperate-and-Humidity/build/bootloader/bootloader.bin"
Bootloader binary size 0x6720 bytes. 0x8e0 bytes (8%) free.
[2/13] Building C object esp-idf/dht11/CMakeFiles/__idf_dht11.dir/src/dht11.c.obj
[3/13] Building C object esp-idf/bee_led_rgb/CMakeFiles/__idf_bee_led_rgb.dir/src/bee_led_rgb.c.obj
[4/13] Building C object esp-idf/bee_uart/CMakeFiles/__idf_bee_uart.dir/src/bee_uart.c.obj
[5/13] Linking C static library esp-idf\dht11\libdht11.a
[6/13] Linking C static library esp-idf\bee_led_rgb\libbee_led_rgb.a
[7/13] Linking C static library esp-idf\bee_uart\libbee_uart.a
[8/13] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/main.c.obj
[9/13] Linking C static library esp-idf\main\libmain.a
[10/13] Generating ld/sections.ld
[11/13] Linking CXX executable main.elf
[12/13] Generating binary image from built executable
esptool.py v4.5.1
Creating esp32 image...
Merged 25 ELF sections
Successfully created esp32 image.
Generated E:/Team1.Temperate-and-Humidity/build/main.bin
[13/13] cmd.exe /C "cd /D E:\Team1.Temperate-and-Humidity\build\esp-idf\esptool_py && C:\Espressif\python_env\idf5.0_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.0.1/components/partition_table/check_sizes.py --offset 0x8000 partition --type app E:/Team1.Temperate-and-Humidity/build/partition_table/partition-table.bin E:/Team1.Temperate-and-Humidity/build/main.bin"
main.bin binary size 0xb5a10 bytes. Smallest app partition is 0x100000 bytes. 0x4a5f0 bytes (29%) free.
