[1/12] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D "E:\Phase2 beta\build\bootloader\esp-idf\esptool_py" && C:\Espressif\python_env\idf5.1_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.1/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 "E:/Phase2 beta/build/bootloader/bootloader.bin""
Bootloader binary size 0x6810 bytes. 0x7f0 bytes (7%) free.
[2/10] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/bee_main.c.obj
[3/10] Building C object esp-idf/bee_wifi/CMakeFiles/__idf_bee_wifi.dir/bee_wifi.c.obj
E:/Phase2 beta/components/bee_wifi/bee_wifi.c: In function 'event_handler':
E:/Phase2 beta/components/bee_wifi/bee_wifi.c:87:29: warning: passing argument 1 of 'vTaskDelete' from incompatible pointer type [-Wincompatible-pointer-types]
   87 |                 vTaskDelete(prov_timeout_task);
      |                             ^~~~~~~~~~~~~~~~~
      |                             |
      |                             void (*)(void *)
In file included from E:/Phase2 beta/components/bee_wifi/bee_wifi.c:14:
C:/Espressif/frameworks/esp-idf-v5.1/components/freertos/FreeRTOS-Kernel/include/freertos/task.h:999:32: note: expected 'TaskHandle_t' {aka 'struct tskTaskControlBlock *'} but argument is of type 'void (*)(void *)'
  999 | void vTaskDelete( TaskHandle_t xTaskToDelete ) PRIVILEGED_FUNCTION;
      |                   ~~~~~~~~~~~~~^~~~~~~~~~~~~
[4/10] Linking C static library esp-idf\bee_wifi\libbee_wifi.a
[5/10] Linking C static library esp-idf\main\libmain.a
[6/10] Generating ld/sections.ld
[7/10] Linking CXX executable bee_main.elf
[8/10] Generating binary image from built executable
esptool.py v4.6.2
Creating esp32 image...
Merged 25 ELF sections
Successfully created esp32 image.
Generated E:/Phase2 beta/build/bee_main.bin
[9/10] cmd.exe /C "cd /D "E:\Phase2 beta\build\esp-idf\esptool_py" && C:\Espressif\python_env\idf5.1_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.1/components/partition_table/check_sizes.py --offset 0x8000 partition --type app "E:/Phase2 beta/build/partition_table/partition-table.bin" "E:/Phase2 beta/build/bee_main.bin""
bee_main.bin binary size 0xfd1f0 bytes. Smallest app partition is 0x100000 bytes. 0x2e10 bytes (1%) free.
Warning: The smallest app partition is nearly full (1% free space left)!
[9/10] cmd.exe /C "cd /D C:\Espressif\frameworks\esp-idf-v5.1\components\esptool_py && C:\Espressif\tools\cmake\3.24.0\bin\cmake.exe -D IDF_PATH=C:/Espressif/frameworks/esp-idf-v5.1 -D SERIAL_TOOL=C:/Espressif/python_env/idf5.1_py3.11_env/Scripts/python.exe;;C:/Espressif/frameworks/esp-idf-v5.1/components/esptool_py/esptool/esptool.py;--chip;esp32 -D SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args -D "WORKING_DIRECTORY=E:/Phase2 beta/build" -P C:/Espressif/frameworks/esp-idf-v5.1/components/esptool_py/run_serial_tool.cmake"
esptool esp32 -p COM3 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size 4MB 0x1000 bootloader/bootloader.bin 0x10000 bee_main.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.6.2
Serial port COM3
Connecting.....
Chip is ESP32-D0WDQ6 (revision v1.0)
Features: WiFi, BT, Dual Core, 240MHz, VRef calibration in efuse, Coding Scheme None
Crystal is 40MHz
MAC: 7c:9e:bd:61:6d:ac
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00001000 to 0x00007fff...
Flash will be erased from 0x00010000 to 0x0010dfff...
Flash will be erased from 0x00008000 to 0x00008fff...
Compressed 26640 bytes to 16669...
Writing at 0x00001000... (50 %)
Writing at 0x0000769f... (100 %)
Wrote 26640 bytes (16669 compressed) at 0x00001000 in 0.9 seconds (effective 245.2 kbit/s)...
Hash of data verified.
Compressed 1036784 bytes to 652044...
Writing at 0x00010000... (2 %)
Writing at 0x0001dd70... (5 %)
Writing at 0x0002a197... (7 %)
Writing at 0x0002f6ac... (10 %)
Writing at 0x00036ed8... (12 %)
Writing at 0x00043801... (15 %)
Writing at 0x00049687... (17 %)
Writing at 0x0004ef94... (20 %)
Writing at 0x00054d4e... (22 %)
Writing at 0x0005a5c2... (25 %)
Writing at 0x000603a4... (27 %)
Writing at 0x00065c37... (30 %)
Writing at 0x0006bac6... (32 %)
Writing at 0x00071623... (35 %)
Writing at 0x00077bc4... (37 %)
Writing at 0x0007d5a5... (40 %)
Writing at 0x0008314f... (42 %)
Writing at 0x0008911e... (45 %)
Writing at 0x0008ed09... (47 %)
Writing at 0x00094665... (50 %)
Writing at 0x00099aa0... (52 %)
Writing at 0x0009ee09... (55 %)
